/* 1. –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∫–ª–æ—É–∂–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç . –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å –æ—Ç 1 –¥–æ 10 –≤ —Ü–∏–∫–ª–µ –∏ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã–∑–≤–∞—Ç—å –∫–ª–æ—É–∂–µ—Ä. –î–æ–±–∞–≤—å—Ç–µ println –≤ –∫–∞–∂–¥—ã–π –≤–∏—Ç–æ–∫ —Ü–∏–∫–ª–∞ –∏ –≤ –∫–ª–æ—É–∂–µ—Ä –∏ –ø—Ä–æ—Å–ª–µ–¥–∏—Ç–µ –∑–∞ –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥. */
print("\nHomework 11. Part 1.")
func score(closure: () -> ()) {
    for value in 1...10 {
        print(value)
    }
    closure()
}
score{ print("value") }

/* 2. –ò—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ –º–∞—Å—Å–∏–≤–æ–≤ sorted, –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –º–∞—Å—Å–∏–≤ –∏–Ω—Ç–æ–≤ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –∏ —É–±—ã–≤–∞–Ω–∏—é. –ü—Ä–∏–º–µ—Ä –ø–æ–∫–∞–∑–∞–Ω –≤ –º–µ—Ç–æ–¥–∏—á–∫–µ. */
print("\nHomework 11. Part 2.")
let arraySort = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]
print(arraySort.sorted{ $0 < $1 })
print(arraySort.sorted{ $0 > $1 })

/* 3. –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∏–Ω—Ç–æ–≤ –∏ –∫–ª–æ—É–∂–µ—Ä –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ç. –ö–ª–æ—É–∂–µ—Ä –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∏–º–∞—Ç—å 2 –∏–Ω—Ç–∞ (–æ–¥–∏–Ω –æ–ø—à–∏–Ω–∞–ª) –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –¥–∞ –∏–ª–∏ –Ω–µ—Ç. –í —Å–∞–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–π—Ç–µ –æ–ø—à–∏–Ω–∞–ª –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é. –í—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏—Å—å –≤ —Ü–∏–∫–ª–µ –ø–æ –º–∞—Å—Å–∏–≤—É –∏–Ω—Ç–æ–≤ –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª–æ—É–∂–µ—Ä. –ï—Å–ª–∏ –∫–ª–æ—É–∂–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞, —Ç–æ –≤—ã –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é. –≤ –∫–æ–Ω—Ü–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é. –ò—Å–ø–æ–ª—å–∑—É—è —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –∏ —ç—Ç–æ—Ç –∫–ª–æ—É–∂–µ—Ä –Ω–∞–π–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞. */
print("\nHomework 11. Part 3.")
func run(array: [Int], closur3: (Int, Int?) -> Bool) -> Int {
    var opt: Int?
    for value in array {
        if opt == nil || closur3(value, opt) {
            opt = value
        }
    }
    return opt ?? 0
}

let arrayOfInt = [1, 3, 9, 27, 81, 243, 729, 2187]
print("Min = \(run(array: arrayOfInt, closur3: { $1 == nil ? true : $0 < $1! }))")
print("Max = \(run(array: arrayOfInt, closur3: { $1 == nil ? true : $0 > $1! }))")

 /* 4. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É. –ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ –µ–µ –≤ –º–∞—Å—Å–∏–≤ –±—É–∫–≤. –ò—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ –º–∞—Å—Å–∏–≤–æ–≤ sorted –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–æ–∫—É —Ç–∞–∫, —á—Ç–æ–±—ã –≤–Ω–∞—á–∞–ª–µ —à–ª–∏ –≥–ª–∞—Å–Ω—ã–µ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, –ø–æ—Ç–æ–º —Å–æ–≥–ª–∞—Å–Ω—ã–µ, –ø–æ—Ç–æ–º —Ü–∏—Ñ—Ä—ã, –∞ –ø–æ—Ç–æ–º —Å–∏–º–≤–æ–ª—ã */
print("\nHomework 11. Part 4.")
func priority(string: String) -> Int {
    switch(string.lowercased()) {
    case "a", "e", "i", "o", "u", "y": return 0
    case "a"..."z": return 1
    case "0"..."9": return 2
    default: return 3
    }
}

func convertStringToArray(str: String) -> [String] {
    var array = [String]()
    for value in str {
        array.append(String(value))
    }
    return array
}

let str = "My name is Aleksey. I am 29"
let newArrayFromStr = convertStringToArray(str: str)

let sortedArray = newArrayFromStr.sorted {
    switch(priority(string: $0),priority(string: $1)) {
    case let (x,y) where x < y: return true
    case let (x,y) where x > y: return false
    default: return $0.lowercased() <= $1.lowercased()
    }
}

print("Sentence - \(str)")
print("Sorted arrey from sentence - \(sortedArray)")

 /* 5. –ü—Ä–æ–¥–µ–ª–∞–π—Ç–µ –∑–∞–¥–∞–Ω–∏–µ ‚Ññ3 –Ω–æ –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –±—É–∫–≤—ã –∏–∑ –º–∞—Å—Å–∏–≤–∞ –±—É–∫–≤ (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ —Å–∫–∞–ª—è—Ä–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é) */
print("\nHomework 11. Part 5.")

func strToArrayOfChar(str: String) -> [Character] {
    var array = [Character]()
    for value in str {
        array.append(value)
    }
    return array
}

func run2(array: [Character], closur5: (Character, Character?) -> Bool) -> Character {
    var opt: Character?
    for value in array {
        if opt == nil || closur5(value, opt) {
            opt = value
        }
    }
    return opt ?? "üö®"
}

let massOfChar = strToArrayOfChar(str: "¬±!1KhJsakgvhSjkvigshVgaOsuYg)$pz")
print("Min = \(run2(array: massOfChar, closur5: { $1 == nil ? true : $0 > $1! }))")
print("Max = \(run2(array: massOfChar, closur5: { $1 == nil ? true : $0 < $1! }))")

/*
 11. –ö–ª–æ—É–∂–µ—Ä—Å—ã –æ_–û - Closures 13:00
 - —ç—Ç–æ –∫—É—Å–æ–∫ –≤–∞—à–µ–≥–æ –∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –í—ã –ø–µ—Ä–µ–¥–∞–µ—Ç–µ –≤ —Ä–∞–∑–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
 
func filterArray(array: [Int], f: (Int) -> Bool) -> [Int]{
    var filtered = [Int]()
    for i in array {
        if f(i) {
            filtered.append(i)
        }
    }
    return filtered
}

/*
func compare(i: Int) -> Bool {
    return i % 2 == 0
}
*/

let numbers = [4, 3, 12, 7, 6, 3, 56, 7, 8, 9, 10, 4, 3, 1, 8, 11]

filterArray(array: numbers, f: {(i: Int) -> Bool in
    return i % 2 == 0
})

filterArray(array: numbers, f: {(i: Int) -> Bool in
    return i % 2 == 1
})

filterArray(array: numbers, f: {(i: Int) -> Bool in
    return i % 3 == 0
})

filterArray(array: numbers, f: {(i: Int) -> Bool in
    return i < 10
})


// ------
// MARK: [simple form]
// FIXME: [aaa]
// TODO: [fix it :)]

filterArray(array: numbers, f: {i in
    return i % 2 == 0
})

let a =
filterArray(array: numbers, f: {i in i % 2 == 0})

let a1 =
filterArray(array: numbers, f: {$0 % 2 == 0})

let a3 =
filterArray(array: numbers) {$0 % 2 == 0}


var count = 0
let array = [1, 2, 3, 5, 7, 123]

let a4 =
filterArray(array: numbers) {value in
    for include in array {
        count += 1
        if include == value {
            return true
        }
    }
    return false
}

count

count = 0

var dict = [Int: Bool]()
for value in array {
    count += 1
    dict[value] = true

}

let a5 =
    filterArray(array: numbers) {value in
        count += 1
        return dict[value] != nil
}

count


*/
